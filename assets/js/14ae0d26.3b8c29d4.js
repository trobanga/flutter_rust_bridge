"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[2967],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),c=i,d=m["".concat(s,".").concat(c)]||m[c]||g[c]||a;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={},o="Logging",l={unversionedId:"guides/how-to/logging",id:"guides/how-to/logging",title:"Logging",description:"Since I have seen some questions asking how logging can be implemented with a Flutter + Rust application, here are some examples.",source:"@site/docs/guides/how-to/logging.md",sourceDirName:"guides/how-to",slug:"/guides/how-to/logging",permalink:"/flutter_rust_bridge/guides/how-to/logging",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/how-to/logging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Debugging",permalink:"/flutter_rust_bridge/guides/how-to/debug"},next:{title:"Report errors",permalink:"/flutter_rust_bridge/guides/how-to/report-error"}},s={},u=[{value:"Logger in production",id:"logger-in-production",level:2},{value:"Simple logger",id:"simple-logger",level:2},{value:"Example: Simple timer",id:"example-simple-timer",level:3}],p={toc:u};function g(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"logging"},"Logging"),(0,i.kt)("p",null,"Since I have seen some questions asking how logging can be implemented with a Flutter + Rust application, here are some examples."),(0,i.kt)("h2",{id:"logger-in-production"},"Logger in production"),(0,i.kt)("p",null,"In my own app in production, I use the following strategy for Rust logging: Use normal Rust logging methods, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"info!")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"debug!")," macros. The logs are consumed in two places: They are printed via platform-specific methods (like android Logcat and iOS NSLog), and also use a Stream to send them to the Dart side such that my Dart code and further process are using the same pipeline as normal Dart logs (e.g. save to a file, send to server, etc)."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},"full")," code related to logging in my app can be seen here: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues/486"},"#486"),"."),(0,i.kt)("h2",{id:"simple-logger"},"Simple logger"),(0,i.kt)("p",null,"Let us implement a simple logging system (adapted from the logging system I use with ",(0,i.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," in my app in production), where Rust code can send logs to Dart code."),(0,i.kt)("p",null,"The Rust ",(0,i.kt)("inlineCode",{parentName:"p"},"api.rs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct LogEntry {\n    pub time_millis: i64,\n    pub level: i32,\n    pub tag: String,\n    pub msg: String,\n}\n\n// Simplified just for demonstration.\n// To compile, you need a OnceCell, or Mutex, or RwLock\n// Also see https://github.com/fzyzcjy/flutter_rust_bridge/issues/398\nlazy_static! { static ref log_stream_sink: StreamSink<LogEntry>; }\n\npub fn create_log_stream(s: StreamSink<LogEntry>) {\n    stream_sink = s;\n}\n")),(0,i.kt)("p",null,"Now Rust will probably complain at you because ",(0,i.kt)("inlineCode",{parentName:"p"},"IntoDart")," is not implemented for ",(0,i.kt)("inlineCode",{parentName:"p"},"LogEntry"),". This is expected, because ",(0,i.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," will generate this trait implementation for you.\nTo fix this error you should just rerun ",(0,i.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen"),"."),(0,i.kt)("p",null,"Generated Dart code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Dart"},"Stream<LogEntry> createLogStream();\n")),(0,i.kt)("p",null,"Now let us use it in Dart:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> setup() async {\n    createLogStream().listen((event) {\n      print('log from rust: ${event.level} ${event.tag} ${event.msg} ${event.timeMillis}');\n    });\n}\n")),(0,i.kt)("p",null,"And now we can happily log anything in Rust:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'log_stream_sink.add(LogEntry { msg: "hello I am a log from Rust", ... })\n')),(0,i.kt)("p",null,"Of course, you can implement a logger following the Rust's ",(0,i.kt)("inlineCode",{parentName:"p"},"log")," crate wrapping this raw stream sink, then you can use standard Rust logging mechanisms like ",(0,i.kt)("inlineCode",{parentName:"p"},"info!"),". I did exactly that in my project."),(0,i.kt)("h3",{id:"example-simple-timer"},"Example: Simple timer"),(0,i.kt)("p",null,"Credits: ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/Desdaemon/be5da0a1c6b4724f20093ef434959744"},"this")," and ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fzyzcjy/flutter_rust_bridge/issues/347"},"#347"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use anyhow::Result;\nuse std::{thread::sleep, time::Duration};\n\nuse flutter_rust_bridge::StreamSink;\n\nconst ONE_SECOND: Duration = Duration::from_secs(1);\n\n// can't omit the return type yet, this is a bug\npub fn tick(sink: StreamSink<i32>) -> Result<()> {\n    let mut ticks = 0;\n    loop {\n        sink.add(ticks);\n        sleep(ONE_SECOND);\n        if ticks == i32::MAX {\n            break;\n        }\n        ticks += 1;\n    }\n    Ok(())\n}\n")),(0,i.kt)("p",null,"And use it in Dart:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/material.dart';\nimport 'ffi.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  late Stream<int> ticks;\n\n  @override\n  void initState() {\n    super.initState();\n    ticks = api.tick();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text(\"Time since starting Rust stream\"),\n            StreamBuilder<int>(\n              stream: ticks,\n              builder: (context, snap) {\n                final style = Theme.of(context).textTheme.headlineMedium;\n                final error = snap.error;\n                if (error != null)\n                  return Tooltip(\n                      message: error.toString(),\n                      child: Text('Error', style: style));\n\n                final data = snap.data;\n                if (data != null) return Text('$data second(s)', style: style);\n\n                return const CircularProgressIndicator();\n              },\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n")))}g.isMDXComponent=!0}}]);