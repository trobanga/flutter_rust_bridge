"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8056],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=l(r),d=o,m=f["".concat(u,".").concat(d)]||f[d]||c[d]||a;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7139:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={},i="Protobuf / JSON / etc",s={unversionedId:"guides/how-to/protobuf-json",id:"guides/how-to/protobuf-json",title:"Protobuf / JSON / etc",description:"If you want to use Protobuf, JSON, or whatever serialization methods, it is also quite easy:",source:"@site/docs/guides/how-to/protobuf-json.md",sourceDirName:"guides/how-to",slug:"/guides/how-to/protobuf-json",permalink:"/flutter_rust_bridge/guides/how-to/protobuf-json",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/how-to/protobuf-json.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stateful Rust",permalink:"/flutter_rust_bridge/guides/how-to/stateful-rust"},next:{title:"Avoid regressions",permalink:"/flutter_rust_bridge/guides/how-to/regression"}},u={},l=[],p={toc:l};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"protobuf--json--etc"},"Protobuf / JSON / etc"),(0,o.kt)("p",null,"If you want to use Protobuf, JSON, or whatever serialization methods, it is also quite easy:\nSince ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," supports complicated types, it surely supports the simple ",(0,o.kt)("inlineCode",{parentName:"p"},"Vec<u8>"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,o.kt)("p",null,"For example, the code below uses JSON to serialize the arguments/results:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'// Dart\nvar result = jsonDecode(await api.f(a: jsonEncode({"x": [100, 200, "what"], "y": "hello"})));\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'// Rust\npub fn f(a: String) -> Result<String> {\n    let arg = serde_json::from_str(&a)?;\n    Ok(json!({"some": "result", "is": [42]}).to_string())\n}\n')),(0,o.kt)("p",null,"If you want to even automatically generate those serialization calls (",(0,o.kt)("inlineCode",{parentName:"p"},"jsonEncode"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonDecode"),", etc),\nfeel free to create an issue to tell me! (I usually reply quickly within hours)"))}c.isMDXComponent=!0}}]);