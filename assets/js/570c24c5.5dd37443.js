"use strict";(self.webpackChunkflutter_rust_bridge=self.webpackChunkflutter_rust_bridge||[]).push([[8773],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=o,g=c["".concat(u,".").concat(m)]||c[m]||p[m]||a;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3893:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>_,default:()=>v,frontMatter:()=>f,metadata:()=>h,toc:()=>y});var r=n(7462),o=(n(7294),n(3905));const a={toc:[]};function i(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"High-level memory-safe binding generator for Flutter/Dart <-> Rust\n\nUsage: flutter_rust_bridge_codegen [OPTIONS] <COMMAND>\n\nCommands:\n  generate   Execute the main code generator\n  create     Create a new Flutter + Rust project\n  integrate  Integrate Rust into existing Flutter project\n  build-web  Compile for the Web (WASM)\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -v, --verbose  Show debug messages\n  -h, --help     Print help\n  -V, --version  Print version\n")))}i.isMDXComponent=!0;const l={toc:[]};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Execute the main code generator\n\nUsage: flutter_rust_bridge_codegen generate [OPTIONS]\n\nOptions:\n      --watch\n          Automatically re-generate the output whenever the changes are detected on the input files\n\n      --config-file <CONFIG_FILE>\n          Path to a YAML config file.\n          \n          If present, other options and flags will be ignored. Accepts the same options as the CLI, but uses snake_case keys.\n\n  -r, --rust-input <RUST_INPUT>\n          Glob pattern of input Rust files\n\n  -d, --dart-output <DART_OUTPUT>\n          Directory of output generated Dart code\n\n  -c, --c-output <C_OUTPUT>\n          Output path of generated C header\n\n      --duplicated-c-output <DUPLICATED_C_OUTPUT>\n          Duplicate the files generated at the location `--c-output` specifies\n\n      --rust-root <RUST_ROOT>\n          Crate directory for your Rust project\n\n      --rust-output <RUST_OUTPUT>\n          Output path of generated Rust code\n\n      --dart-entrypoint-class-name <DART_ENTRYPOINT_CLASS_NAME>\n          Generated dart entrypoint class name\n\n      --dart-format-line-length <DART_FORMAT_LINE_LENGTH>\n          Line length for Dart formatting\n\n      --no-dart-enums-style\n          The generated Dart enums will not have their variant names camelCased\n\n      --no-add-mod-to-lib\n          Skip automatically adding `mod frb_generated;` to `lib.rs`\n\n      --llvm-path <LLVM_PATH>...\n          Path to the installed LLVM\n\n      --llvm-compiler-opts <LLVM_COMPILER_OPTS>\n          LLVM compiler opts\n\n      --dart-root <DART_ROOT>...\n          Path to root of Dart project, otherwise inferred from --dart-output\n\n      --no-build-runner\n          Skip running build_runner even when codegen-required code is detected\n\n      --extra-headers <EXTRA_HEADERS>\n          extra_headers is used to add dependencies header\n\n      --no-web\n          Disable web module generation\n\n      --no-deps-check\n          Skip dependencies check\n\n      --default-external-library-loader-web-prefix <DEFAULT_EXTERNAL_LIBRARY_LOADER_WEB_PREFIX>\n          The value for defaultExternalLibraryLoader.webPrefix\n\n      --no-dart3\n          Disable language features introduced in Dart 3\n\n      --full-dep\n          Enable full dependencies\n\n      --dump [<DUMP>...]\n          A list of data to be dumped. If specified without a value, defaults to all\n          \n          [possible values: config, source, source-graph, ir, generator-info, generator-spec, generator-text]\n\n      --dump-all\n          Dump all internal data. Same as `--dump` with all possible choices chosen\n\n  -h, --help\n          Print help (see a summary with '-h')\n")))}u.isMDXComponent=!0;const d={toc:[]};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Build for web platform\n\nUsage: flutter_rust_bridge build-web [arguments]\n-h, --help                          Print this usage information.\n    --dart-root                     Root folder of dart package\n-c, --rust-root                     Directory of the rust package\n                                    (defaults to "rust")\n-o, --output=<PKG>                  Output path\n    --release                       Compile in release mode\n-v, --[no-]verbose                  Display more verbose information\n    --cargo-build-args              Arguments passed to cargo-build\n    --wasm-bindgen-args             Arguments passed to wasm-bindgen\n    --dart-compile-js-entrypoint    If specified, compile Dart into JavaScript and use this option as entrypoint\n\nRun "flutter_rust_bridge help" to see global options.\n')))}s.isMDXComponent=!0;const p={toc:[]};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Create a new Flutter + Rust project\n\nUsage: flutter_rust_bridge_codegen create [OPTIONS] <NAME>\n\nArguments:\n  <NAME>  Name of the new project\n\nOptions:\n      --org <ORG>\n          The organization responsible for your new Flutter project, in reverse domain name notation\n      --rust-crate-name <RUST_CRATE_NAME>\n          The name of the generated Rust crate\n      --rust-crate-dir <RUST_CRATE_DIR>\n          The directory of the generated Rust crate\n  -h, --help\n          Print help\n")))}c.isMDXComponent=!0;const m={toc:[]};function g(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Integrate Rust into existing Flutter project\n\nUsage: flutter_rust_bridge_codegen integrate [OPTIONS]\n\nOptions:\n      --no-enable-integration-test         Generate code related to integration test\n      --rust-crate-name <RUST_CRATE_NAME>  The name of the generated Rust crate\n      --rust-crate-dir <RUST_CRATE_DIR>    The directory of the generated Rust crate\n  -h, --help                               Print help\n")))}g.isMDXComponent=!0;const f={},_="Code generator",h={unversionedId:"guides/custom/codegen",id:"guides/custom/codegen",title:"Code generator",description:"Provide parameters to codegen",source:"@site/docs/guides/custom/codegen.md",sourceDirName:"guides/custom",slug:"/guides/custom/codegen",permalink:"/flutter_rust_bridge/guides/custom/codegen",draft:!1,editUrl:"https://github.com/fzyzcjy/flutter_rust_bridge/tree/master/website/docs/guides/custom/codegen.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Customization",permalink:"/flutter_rust_bridge/guides/custom/"},next:{title:"Rust runtime",permalink:"/flutter_rust_bridge/guides/custom/rust"}},b={},y=[{value:"Provide parameters to codegen",id:"provide-parameters-to-codegen",level:2},{value:"Configuration file",id:"configuration-file",level:3},{value:"Command line arguments",id:"command-line-arguments",level:3},{value:"Inside <code>pubspec.yaml</code>",id:"inside-pubspecyaml",level:3},{value:"Explanation of each parameter",id:"explanation-of-each-parameter",level:2},{value:"<code>flutter_rust_bridge_codegen</code>",id:"flutter_rust_bridge_codegen",level:3},{value:"<code>flutter_rust_bridge_codegen generate</code>",id:"flutter_rust_bridge_codegen-generate",level:3},{value:"<code>flutter_rust_bridge_codegen build-web</code>",id:"flutter_rust_bridge_codegen-build-web",level:3},{value:"<code>flutter_rust_bridge_codegen create</code>",id:"flutter_rust_bridge_codegen-create",level:3},{value:"<code>flutter_rust_bridge_codegen integrate</code>",id:"flutter_rust_bridge_codegen-integrate",level:3}],k={toc:y};function v(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"code-generator"},"Code generator"),(0,o.kt)("h2",{id:"provide-parameters-to-codegen"},"Provide parameters to codegen"),(0,o.kt)("p",null,"It is equivalent to provide a parameter using the three approaches below."),(0,o.kt)("h3",{id:"configuration-file"},"Configuration file"),(0,o.kt)("p",null,"The suggested mode to run ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen"),",\nis to create ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge.yaml")," configuration file,\nand invoke command line without arguments."),(0,o.kt)("p",null,"All these file names work\n(though I personally suggest to use ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge.yaml"),',\nbecause it matches the Flutter convention, the "',(0,o.kt)("inlineCode",{parentName:"p"},"pubspec.yaml"),'"):'),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Full name list"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".flutter_rust_bridge.yml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".flutter_rust_bridge.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},".flutter_rust_bridge.json")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"flutter_rust_bridge.yml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"flutter_rust_bridge.yaml")," (suggested)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"flutter_rust_bridge.json")))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen create/integrate")," already creates a configuration file for you,\nwhich is often sufficient."),(0,o.kt)("p",null,"The parameter names are the same as the one shown in command line help,\nexcept that there are no ",(0,o.kt)("inlineCode",{parentName:"p"},"no_")," negations here.\nYou can also refer to the fields of\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/flutter_rust_bridge_codegen/2.0.0-dev.0/lib_flutter_rust_bridge_codegen/codegen/struct.Config.html"},"this struct"),"\n(may need to switch to latest version)\nfor parameter names.\nAnyway, if a wrong name is provided, it will be immediately recognized and reported."),(0,o.kt)("h3",{id:"command-line-arguments"},"Command line arguments"),(0,o.kt)("p",null,"For example, suppose you want to provide ",(0,o.kt)("inlineCode",{parentName:"p"},"rust_input")," argument,\nthen just do ",(0,o.kt)("inlineCode",{parentName:"p"},"--rust-input your_value"),"."),(0,o.kt)("h3",{id:"inside-pubspecyaml"},"Inside ",(0,o.kt)("inlineCode",{parentName:"h3"},"pubspec.yaml")),(0,o.kt)("p",null,"Similarly, if you're calling ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge_codegen")," from the root of your Dart project,\nyou can also fill in your config under the ",(0,o.kt)("inlineCode",{parentName:"p"},"flutter_rust_bridge")," entry in ",(0,o.kt)("inlineCode",{parentName:"p"},"pubspec.yaml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# put this somewhere in your pubspec.yaml\nflutter_rust_bridge:\n  rust_input: rust/src/api/**/*.rs\n  dart_output: lib/src/rust\n  # ...\n")),(0,o.kt)("h2",{id:"explanation-of-each-parameter"},"Explanation of each parameter"),(0,o.kt)("p",null,"Simply add ",(0,o.kt)("inlineCode",{parentName:"p"},"--help")," to see full documentation. The following is a snapshot when running the command with ",(0,o.kt)("inlineCode",{parentName:"p"},"--help"),":"),(0,o.kt)("h3",{id:"flutter_rust_bridge_codegen"},(0,o.kt)("inlineCode",{parentName:"h3"},"flutter_rust_bridge_codegen")),(0,o.kt)(i,{mdxType:"CommandMain"}),(0,o.kt)("h3",{id:"flutter_rust_bridge_codegen-generate"},(0,o.kt)("inlineCode",{parentName:"h3"},"flutter_rust_bridge_codegen generate")),(0,o.kt)(u,{mdxType:"CommandGenerate"}),(0,o.kt)("h3",{id:"flutter_rust_bridge_codegen-build-web"},(0,o.kt)("inlineCode",{parentName:"h3"},"flutter_rust_bridge_codegen build-web")),(0,o.kt)(s,{mdxType:"CommandBuildWeb"}),(0,o.kt)("h3",{id:"flutter_rust_bridge_codegen-create"},(0,o.kt)("inlineCode",{parentName:"h3"},"flutter_rust_bridge_codegen create")),(0,o.kt)(c,{mdxType:"CommandCreate"}),(0,o.kt)("h3",{id:"flutter_rust_bridge_codegen-integrate"},(0,o.kt)("inlineCode",{parentName:"h3"},"flutter_rust_bridge_codegen integrate")),(0,o.kt)(g,{mdxType:"CommandIntegrate"}))}v.isMDXComponent=!0}}]);